fn main() -> void { }
fn test[$T](a: $T) -> { }

var a = fn (a: String = "") -> String { a }

# maybe a is typed
#(?
  (var a
    (fndef
      (proto
        (lst (: a infer) (: b infer) )
        infer
      )
      (block
        (return (+ a c))
      )
    )
  )
#)
var a = fn (a, b) => a + c

#(?
  (fndecl
    ba
    (fndef
      (proto
        (lst $T $U)
        (lst (: a String) (: b $T))
        $U
      )
      (block
        (return (. a b))
      )
    )
  )
#)
fn ba[$T, $U](a: String, b: $T) -> $U { return a.b }

#(?
  (var (= b
    (fndef
      (proto
        (lst $T $U)
        (lst (: a String) (: b $T))
        (infer)
      )
      (block
        (@ toto $U)
      )
    )
  ))
#)
var b = fn [$T, $U](a: String, b: $T) => toto@$U

a.map(fn (a) => a)
