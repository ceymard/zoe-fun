#(?
  (decl:fn test
    (template
      [$T]
      (fndef (signature [(: arg $T)] $T) {})
    )
  )
#)
template $T
fn test(arg: $T) -> $T { }

#(?
  (decl:type Cbk
    (signature [String Int] void)
  )
#)
type Cbk is fn(String, Int) -> void

var a = fn (a: String = "") -> String { a }

# maybe a is typed
#(?
  (decl:var a
    (infer)
    (fndef
      (signature
        [a b]
        (infer)
      )
      {(+ a c)}
    )
  )
#)
var a = fn (a, b) => a + c

#(?
  (decl:fn
    ba
    (template [$T $U]
      (fndef
        (signature
          [(: a String) (: b $T)]
          $U
        )
        {
          (return (. a b))
        }
      )
    )
  )
#)
template $T, $U
fn ba(a: String, b: $T) -> $U { return a.b }

#(?
  (call
    (. a map)
    (fndef
      (signature
        [a]
        (infer)
      )
      {a}
    )
  )
#)
a.map(fn (a) => a)


#(?
  (call c [a b])
#)
c(a, b)