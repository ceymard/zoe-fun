#(?
  (fndecl test
    (fndef
      (template [(var $T null null)])
      (signature [(var arg $T null)] $T)
      {}
    )
  )
#)
template test($T) is fn (arg: $T) -> $T { }

#(?
  (typedecl
    Cbk
    null
    (fndef
      null
      (signature [(var a String null) (var b Int null)] void)
      null
    )
  )
#)
type Cbk is fn(a: String, b: Int) -> void

#(?
  (var a null
    (fndef
      null
      (signature
        [(var a String '')]
        String
      )
      {a}
    )
  )
#)
var a = fn (a: String = '') -> String { a }

# maybe a is typed
#(?
  (var a ~ (fn ~ (signature [(var a ~ ~) (var b ~ ~)] ~) (+ a c)))
#)
var a = fn (a, b) => a + c

#(?
  (template [(var $T ~ ~) (var $U ~ ~)] ~ (fn ba (signature [(var a String ~) (var b $T ~)] $U) {(return (. a b))}))
#)
template ba($T, $U) is fn (a: String, b: $T) -> $U { return a.b }

#(?
  (call (. a map) [(fn ~ (signature [(var a ~ ~)] ~) a)])
#)
a.map(fn (a) => a)


#(?
  (call c [a b])
#)
c(a, b)