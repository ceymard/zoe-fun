#(?
  (fndecl test
    (fndef
      (template [(var $T null null)])
      (signature [(var arg $T null)] $T)
      {}
    )
  )
#)
template $T
fn test(arg: $T) -> $T { }

#(?
  (typedecl
    Cbk
    null
    (fndef
      null
      (signature [(var a String null) (var b Int null)] void)
      null
    )
  )
#)
type Cbk is fn(a: String, b: Int) -> void

#(?
  (var a null
    (fndef
      null
      (signature
        [(var a String '')]
        String
      )
      {a}
    )
  )
#)
var a = fn (a: String = '') -> String { a }

# maybe a is typed
#(?
  (var a
    null
    (fndef
      null
      (signature
        [(var a null null) (var b null null)]
        null
      )
      {(+ a c)}
    )
  )
#)
var a = fn (a, b) => a + c

#(?
  (fndecl
    ba
    (fndef
      (template [(var $T null null) (var $U null null)])
      (signature
        [(var a String null) (var b $T null)]
        $U
      )
      {
        (return (. a b))
      }
    )
  )
#)
template $T, $U
fn ba(a: String, b: $T) -> $U { return a.b }

#(?
  (fncall
    (. a map)
    [(fndef
      null
      (signature
        [(var a null null)]
        null
      )
      {a}
    )]
  )
#)
a.map(fn (a) => a)


#(?
  (fncall c [a b])
#)
c(a, b)