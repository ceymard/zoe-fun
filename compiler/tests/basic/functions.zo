#(?
  (fndecl test
    (fndef
      (template [(var $T <nil> <nil>)])
      (signature [(var arg $T <nil>)] $T)
      {}
    )
  )
#)
template $T
fn test(arg: $T) -> $T { }

#(?
  (typedecl
    Cbk
    <nil>
    (fndef
      <nil>
      (signature [(var a String <nil>) (var b Int <nil>)] void)
      <nil>
    )
  )
#)
type Cbk is fn(a: String, b: Int) -> void

#(?
  (var a <nil>
    (fndef
      <nil>
      (signature
        [(var a String '')]
        String
      )
      {a}
    )
  )
#)
var a = fn (a: String = '') -> String { a }

# maybe a is typed
#(?
  (var a
    <nil>
    (fndef
      <nil>
      (signature
        [(var a <nil> <nil>) (var b <nil> <nil>)]
        <nil>
      )
      {(+ a c)}
    )
  )
#)
var a = fn (a, b) => a + c

#(?
  (fndecl
    ba
    (fndef
      (template [(var $T <nil> <nil>) (var $U <nil> <nil>)])
      (signature
        [(var a String <nil>) (var b $T <nil>)]
        $U
      )
      {
        (return (. a b))
      }
    )
  )
#)
template $T, $U
fn ba(a: String, b: $T) -> $U { return a.b }

#(?
  (fncall
    (. a map)
    [(fndef
      <nil>
      (signature
        [(var a <nil> <nil>)]
        <nil>
      )
      {a}
    )]
  )
#)
a.map(fn (a) => a)


#(?
  (fncall c [a b])
#)
c(a, b)