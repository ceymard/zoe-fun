#(?
  (decl:fn test
    (template
      [$T]
      (fndef (signature [(: arg $T)] $T) {})
    )
  )
#)
template $T
fn test(arg: $T) -> $T { }

#(?
  (decl:type Cbk
    (signature [String Int] void)
  )
#)
type Cbk is fn(String, Int) -> void

var a = fn (a: String = "") -> String { a }

# maybe a is typed
#(?
  (decl:var a
    (fndef
      (signature
        [(: a (infer)) (: b (infer))]
        (infer)
      )
      (+ a c)
    )
  )
#)
var a = fn (a, b) => a + c

#(?
  (decl:fn
    ba
    (fndef
      (signature
        [$T $U]
        [(: a String) (: b $T)]
        $U
      )
      {
        (return (. a b))
      }
    )
  )
#)
fn ba@<$T, $U>(a: String, b: $T) -> $U { return a.b }

var map = fn @[$T, $U](a: Iterable<$T>, func: fn (arg: $T) -> $U) -> Slice<$U> {
  var res = Slice::create@$U(a.length ?? 0)
  for var item in a {
    yield func(item)
  }
}

#(?
  (call
    (. a map)
    (fndef
      (signature
        [(: a (infer))]
        (infer)
      )
      (block
        (return a)
      )
    )
  )
#)
a.map(fn (a) => a)


#(?
  (call c (lst a, b))
#)
c(a, b)