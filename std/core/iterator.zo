
#(?
  ... !
#)
type Iterator[$T] is trait (
  #? Get the size of the ensemble being iterated over
  fn next() -> $T
) implements Sliceable (

  fn zobi@Sliceable(arg1, arg2) {
    return 3
  }

  fn size() -> Size | Error {
    Iterator::Stop
  }
)


namespace Iterator {

  type Stop is value #?????

}

#(?
  Iterators... !
#)
template $T
type Iterable is trait (
  fn getIterator() -> Iterator@($T)
)
