import './iterator' ( Iterable, Iterator )

#(?
  Slices are kinda like arrays.
#)
type Slice[$T] is struct (
  length: Size,
  capacity: Size,
  ptr: *$T,
)
implements Iterable[$T] {

  method bounds() -> Range[Int32] { range(0, this.length) }

  method getIterator@Iterable() { SliceIterator(slc = this, pos = 0) }

  type SliceIterator is struct (
    slc: *Slice[$T]
    pos: Size
  ) implements Iterator[$T] {

    fn size() { this.slc.length }

    unsafe fn next() {
      if this.pos < this.slc.length {
        this.pos++
        return this.slc[this.pos]
      }
      Iterator.Stop()
    }
  }

}
