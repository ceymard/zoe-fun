import './iterator' (
  Iterable,
  Iterator
)

#(?
  Slices are kinda like arrays.
#)
type Slice[$T] is struct (
  length: Size
  capacity: Size
  ptr: *$T
) implements Iterable[$T] (

  method bounds() -> Iterator[Int32] { iterate(0, this.length, 1) }

  method getIterator@Iterable() { SliceIterator(slc = this, pos = 0) }

  #(?
    Iterate over a slide
  #)
  type SliceIterator is struct (
    slc: *Slice[$T]
    pos: Size
  ) implements Iterator[$T] {

    method size() { this.slc.length }

    method next() {
      if this.pos < this.slc.length {
        this.pos++
        return this.slc[this.pos]
      }
      Iterator.Stop()
    }
  }

)
